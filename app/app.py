# -*- coding: utf-8 -*-
import os, sys
from dotenv import load_dotenv; load_dotenv()

os.environ.setdefault("STRATEGY_PATH", "capintel.strategy.my_strategy_ml:generate_signal_core")

ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if ROOT_DIR not in sys.path:
    sys.path.insert(0, ROOT_DIR)

import streamlit as st
from streamlit.components.v1 import html as st_html

from capintel.signal_engine import build_signal
from capintel.providers.polygon_client import get_last_price, PolygonError
from capintel.visuals_svg import render_gauge_svg
from capintel.narrator import trader_tone_narrative_ru  # —Ñ–æ–ª–±—ç–∫-—Ç–µ–∫—Å—Ç

st.set_page_config(page_title="CapIntel ‚Äî AI Signals", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ CapIntel ‚Äî AI Signals (Crypto & Equities)")
st.caption("Meta-labeling –ø–æ–≤–µ—Ä—Ö –ø—Ä–∞–≤–∏–ª. Fibo-–ø–∏–≤–æ—Ç—ã + HA + MACD + RSI + ATR. ML –≤–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å models/meta.pkl.")

with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    dev_mode   = st.toggle("–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", value=False)
    show_gauge = st.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", value=True)
    st.caption(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {os.getenv('STRATEGY_PATH','<fallback>')}")
    asset_class = st.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["crypto","equity"], index=0)
    horizon     = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday","swing","position"], index=2)
    ticker      = st.text_input("–¢–∏–∫–µ—Ä", value=("BTCUSDT" if asset_class=='crypto' else "AAPL"))
    manual_price= st.text_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", value="")
    go = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª", type="primary", use_container_width=True)

if not go:
    st.markdown("> –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª**.")
    st.stop()

# 1) —Ü–µ–Ω–∞
price = None
if manual_price.strip():
    try:
        price = float(manual_price.replace(",", "."))
    except Exception:
        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã."); st.stop()
if price is None:
    try:
        price = float(get_last_price(asset_class, ticker))
    except PolygonError as e:
        st.warning(str(e))
        st.info("–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é –≤ –ø–æ–ª–µ ¬´–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞¬ª.")
        st.stop()

# 2) —Å–∏–≥–Ω–∞–ª
sig = build_signal(ticker, asset_class, horizon, price)

col1, col2 = st.columns([1.0, 1.15], gap="large")

def _fmt_num(x):
    try:
        return f"{float(x):.2f}"
    except Exception:
        return "‚Äî"

with col1:
    st.subheader(f"{sig.ticker} ¬∑ {sig.asset_class.upper()} ¬∑ {sig.horizon}")
    st.markdown(f"### ‚û§ –î–µ–π—Å—Ç–≤–∏–µ: **{sig.action}**")

    # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è WAIT/CLOSE
    if sig.action in ("BUY", "SHORT"):
        st.markdown(
            f"**–í—Ö–æ–¥:** `{_fmt_num(sig.entry)}`  \n"
            f"**–¶–µ–ª–∏:** `TP1 {_fmt_num(sig.take_profit[0])}` ¬∑ `TP2 {_fmt_num(sig.take_profit[1])}`  \n"
            f"**–°—Ç–æ–ø:** `{_fmt_num(sig.stop)}`  \n"
        )
    else:
        st.markdown("**–í—Ö–æ–¥:** `‚Äî`  \n**–¶–µ–ª–∏:** `‚Äî`  \n**–°—Ç–æ–ø:** `‚Äî`  \n")

    st.markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** `{int(sig.confidence*100)}%`  \n**–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** `{sig.position_size_pct_nav}% NAV`")

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –≤—Å–µ–≥–¥–∞; –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π –≤ —Å–∏–≥–Ω–∞–ª–µ ‚Äî –¥–∞—ë–º —Ñ–æ–ª–±—ç–∫-—Ç–µ–∫—Å—Ç
    narr = getattr(sig, "narrative_ru", None) or trader_tone_narrative_ru(sig.action, sig.horizon, price)
    st.info(narr)

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å WAIT
    if sig.alternatives and sig.alternatives[0].get("action") in ("BUY","SHORT"):
        alt = sig.alternatives[0]
        st.markdown("**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω**")
        st.markdown(
            f"- {alt.get('if_condition','—É—Å–ª–æ–≤–∏–µ')}: **{alt['action']}** –æ—Ç `{_fmt_num(alt['entry'])}` ‚Üí "
            f"TP1 `{_fmt_num(alt['take_profit'][0])}`, TP2 `{_fmt_num(alt['take_profit'][1])}`, "
            f"—Å—Ç–æ–ø `{_fmt_num(alt['stop'])}`"
        )

with col2:
    # –°—á—ë—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    score = 0.0
    if sig.action == "BUY":
        score = min(2.0, max(0.0, (sig.confidence - 0.5) / 0.4 * 2.0))
    elif sig.action == "SHORT":
        score = -min(2.0, max(0.0, (sig.confidence - 0.5) / 0.4 * 2.0))

    if show_gauge:
        try:
            prev = st.session_state.get("prev_score")
            svg  = render_gauge_svg(score, prev_score=prev, max_width=660, scale=0.85, font_scale=0.9, animate=True)
            st_html(svg, height=int(660*0.85*0.60*1.05))
            st.session_state["prev_score"] = score
        except Exception as e:
            st.warning(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
