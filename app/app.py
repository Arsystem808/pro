# -*- coding: utf-8 -*-
# CapIntel ‚Äî AI Signals (Crypto & Equities)

# --- bootstrap PYTHONPATH so "capintel" is importable ---
import os, sys
REPO_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if REPO_ROOT not in sys.path:
    sys.path.insert(0, REPO_ROOT)

import json
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

import streamlit as st

# –ü–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from capintel.signal_engine import build_signal
except Exception as e:
    st.error(
        "–ù–µ —É–¥–∞—ë—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å `capintel.signal_engine`. "
        "–ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: —Ä—è–¥–æ–º —Å –ø–∞–ø–∫–æ–π `app/` –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–∞–ø–∫–∞ "
        "`capintel/` —Å —Ñ–∞–π–ª–∞–º–∏ `__init__.py` –∏ `signal_engine.py`.\n\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}"
    )
    st.stop()

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –º—è–≥–∫–æ)
_render_svg = None
try:
    from capintel.visuals_svg import render_gauge_svg as _render_svg  # type: ignore
except Exception:
    _render_svg = None

# –ù–∞—Ä–∞—Ç–∏–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
_narr = None
try:
    from capintel.narrator import trader_tone_narrative_ru as _narr  # type: ignore
except Exception:
    _narr = None


# ---------------- UI helpers ----------------
def pill(value: Any) -> str:
    return f"<span style='background:#1f7a1f22;border:1px solid #39d37a44;" \
           f"padding:2px 8px;border-radius:8px;font-weight:600'>{value}</span>"


def pct_to_str(p: Optional[float]) -> str:
    if p is None:
        return "‚Äî"
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ 0..1 –∏–ª–∏ 0..100 ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    v = p if p > 1.001 else p * 100.0
    return f"{v:.0f}%"


def compute_score(sig: Dict[str, Any]) -> float:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ [-2..+2] –¥–ª—è —à–∫–∞–ª—ã.
    1) –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ä–Ω—É–ª–∞ 'score' ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º.
    2) –ò–Ω–∞—á–µ ‚Äî —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.
    """
    if isinstance(sig.get("score"), (int, float)):
        s = float(sig["score"])
        # –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∂–µ–º
        return max(-2.0, min(2.0, s))

    action = (sig.get("action") or "").upper()
    conf = sig.get("confidence")
    if conf is None:
        conf = 0.5
    conf = conf if conf > 1.001 else conf * 100.0  # –≤ %
    base = 0.0
    if action in ("LONG", "BUY"):
        base = 1.0
    elif action in ("SHORT", "SELL"):
        base = -1.0
    else:  # WAIT / CLOSE / –ø—Ä–æ—á–µ–µ
        base = 0.0
    # —É—Å–∏–ª–∏–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: >70% –±–ª–∏–∂–µ –∫ 2, <40% –±–ª–∏–∂–µ –∫ 0
    k = 0.5 + max(0.0, (conf - 40.0)) / 60.0  # 0.5..1.5
    score = base * k
    return max(-2.0, min(2.0, score))


def show_gauge(sig: Dict[str, Any]) -> None:
    score = compute_score(sig)
    if _render_svg is None:
        st.caption("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –º–æ–¥—É–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å,
    # —Ç.–∫. —É —Ç–µ–±—è –º–æ–≥–ª–∞ –±—ã—Ç—å –¥—Ä—É–≥–∞—è –≤–µ—Ä—Å–∏—è visuals_svg.
    svg = None
    try:
        svg = _render_svg(score)  # —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
    except TypeError:
        try:
            svg = _render_svg(score, title="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞")  # –≤–∞—Ä–∏–∞–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        except Exception:
            svg = None
    if svg:
        st.markdown(
            f"<div style='display:flex;justify-content:center;'>{svg}</div>",
            unsafe_allow_html=True,
        )


# ---------------- Page config ----------------
st.set_page_config(
    page_title="CapIntel ‚Äî AI Signals",
    layout="wide",
)

st.markdown("## ü§ñ CapIntel ‚Äî AI Signals (Crypto & Equities)")
st.caption("Meta-labeling –ø–æ–≤–µ—Ä—Ö –ø—Ä–∞–≤–∏–ª. ML –≤–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω `models/meta.pkl`.")

# ---------------- Sidebar ----------------
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    asset_class = st.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["equity", "crypto"], index=0)
    horizon = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday", "swing", "position"], index=1)
    ticker = st.text_input("–¢–∏–∫–µ—Ä", value="AAPL" if asset_class == "equity" else "BTCUSD")
    price_in = st.text_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", value="").strip()
    show_g = st.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", value=True)
    dev = st.toggle("–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", value=False)
    submitted = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª", type="primary")

# ---------------- Main logic ----------------
if submitted:
    if not ticker:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä.")
        st.stop()

    # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
    price_val: Optional[float] = None
    if price_in:
        try:
            price_val = float(price_in.replace(",", "."))
        except Exception:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ–ª–µ '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞'. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.")
            price_val = None

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
    try:
        sig: Dict[str, Any] = build_signal(
            ticker=ticker.strip().upper(),
            asset_class=asset_class.strip().lower(),
            horizon=horizon.strip().lower(),
            price=price_val,
        )
    except ValueError as ve:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {ve}")
        st.stop()
    except Exception as e:
        st.exception(e)
        st.stop()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    st.markdown(
        f"### {ticker.strip().upper()} ‚Ä¢ {asset_class.upper()} ‚Ä¢ {horizon.lower()}",
    )

    # --- –õ–∏–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π ---
    cols = st.columns(3)
    def _fmt_num(x: Any) -> str:
        try:
            return f"{float(x):.2f}"
        except Exception:
            return "‚Äî"

    entry = sig.get("entry")
    stop = sig.get("stop")
    tps: List[float] = []
    if isinstance(sig.get("take_profit"), (list, tuple)):
        tps = [float(x) for x in sig["take_profit"] if x is not None]

    with cols[0]:
        st.markdown(f"**–î–µ–π—Å—Ç–≤–∏–µ:** {sig.get('action','‚Äî')}")
        st.markdown(f"**–í—Ö–æ–¥:** {_fmt_num(entry)}")
    with cols[1]:
        if tps:
            tp_txt = " ‚Ä¢ ".join([f"TP{i+1} {_fmt_num(tp)}" for i, tp in enumerate(tps[:2])])
        else:
            tp_txt = "‚Äî"
        st.markdown(f"**–¶–µ–ª–∏:** {tp_txt}")
    with cols[2]:
        st.markdown(f"**–°—Ç–æ–ø:** {_fmt_num(stop)}")

    # --- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å/—Ä–∞–∑–º–µ—Ä ---
    cols2 = st.columns(2)
    with cols2[0]:
        st.markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pct_to_str(sig.get('confidence'))}")
    with cols2[1]:
        sz = sig.get("position_size_pct_nav")
        st.markdown(f"**–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** {pct_to_str(sz)} NAV")

    # --- –®–∫–∞–ª–∞ ---
    if show_g:
        show_gauge(sig)

    # --- –ù–∞—Ä–∞—Ç–∏–≤/–∑–∞–º–µ—Ç–∫–∞ –æ ML ---
    ml_note = sig.get("ml_note")
    if not ml_note:
        # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–∞—à–ª–∞—Å—å ‚Äî –ø–æ–∫–∞–∂–µ–º ON, –∏–Ω–∞—á–µ OFF
        ml_note = "[ML ON] –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞." if sig.get("p_succ") is not None else "[ML OFF] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rule-based –ª–æ–≥–∏–∫–∞."
    st.info(ml_note)

    # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–∏–ª–∞ narrative_ru ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∫–æ
    nar = sig.get("narrative_ru")
    if not nar and _narr:
        try:
            nar = _narr(sig)
        except Exception:
            nar = None
    if nar:
        st.info(nar)

    # --- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω ---
    alts = sig.get("alternatives") or []
    if isinstance(alts, list) and alts:
        st.subheader("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω")
        for a in alts:
            a_act = (a.get("action") or "‚Äî").upper()
            a_entry = _fmt_num(a.get("entry"))
            a_tps = a.get("take_profit") or []
            a_stop = _fmt_num(a.get("stop"))
            a_tp_txt = " ‚Ä¢ ".join([f"TP{i+1} {_fmt_num(tp)}" for i, tp in enumerate(a_tps[:2])]) if a_tps else "‚Äî"
            cond = a.get("if_condition")
            bullet = f"**{a_act}** –æ—Ç {pill(a_entry)} ‚Üí {pill(a_tp_txt)}, —Å—Ç–æ–ø {pill(a_stop)}"
            if cond:
                bullet = f"{cond}: " + bullet
            st.markdown("‚Ä¢ " + bullet, unsafe_allow_html=True)

    # --- –°–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è (–¥–ª—è –¥–µ–±–∞–≥–∞/–∞—É–¥–∏—Ç–∞) ---
    meta_cols = st.columns(3)
    with meta_cols[0]:
        st.caption(f"–°–æ–∑–¥–∞–Ω: {sig.get('created_at','‚Äî')}")
    with meta_cols[1]:
        st.caption(f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {sig.get('expires_at','‚Äî')}")
    with meta_cols[2]:
        st.caption(f"ID: {sig.get('id','‚Äî')}")

    st.caption("–ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –¢–æ—Ä–≥–æ–≤–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å —Ä–∏—Å–∫–æ–º.")

    with st.expander("JSON"):
        st.code(json.dumps(sig, ensure_ascii=False, indent=2))

else:
    st.info("–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª**.")
