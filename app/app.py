# -*- coding: utf-8 -*-
import os, sys, json, time
from datetime import datetime
import streamlit as st

# --- —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç capintel —Ä–∞–±–æ—Ç–∞–ª –∏ –ª–æ–∫–∞–ª—å–Ω–æ, –∏ –≤ –æ–±–ª–∞–∫–µ
ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

from capintel import build_signal
from capintel.visuals_svg import render_gauge_svg

st.set_page_config(page_title="CapIntel ‚Äî AI Signals", layout="wide")

st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
asset_class = st.sidebar.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["equity", "crypto"], index=0)
horizon     = st.sidebar.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday", "swing", "position"], index=1)
ticker      = st.sidebar.text_input("–¢–∏–∫–µ—Ä", value="AAPL")
price_str   = st.sidebar.text_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", value="")
dev_mode    = st.sidebar.toggle("–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", value=False)

run = st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")

st.title("üôÇ CapIntel ‚Äî AI Signals (Crypto & Equities)")
st.caption("Meta-labeling –ø–æ–≤–µ—Ä—Ö –ø—Ä–∞–≤–∏–ª. ML –≤–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω `models/meta.pkl`.")

def _fmt(v):
    return "‚Äî" if v is None else (f"{v:.2f}" if isinstance(v,(int,float)) else str(v))

if run:
    t0 = time.time()
    try:
        price = float(price_str) if price_str.strip() else None
        sig = build_signal(ticker.strip().upper(), asset_class, horizon, price)

        colL, colR = st.columns([2,1])
        with colL:
            st.markdown(f"### {ticker.upper()} ‚Ä¢ {asset_class.upper()} ‚Ä¢ {horizon}")
            st.markdown(f"### ‚û§ –†–µ—à–µ–Ω–∏–µ: **{sig['action']}**")

            show_numbers = sig["action"] != "WAIT"
            entry = f"{sig['entry']:.2f}" if show_numbers and sig.get("entry") is not None else "‚Äî"
            tp1   = f"{sig['tp1']:.2f}"   if show_numbers and sig.get("tp1")   is not None else "‚Äî"
            tp2   = f"{sig['tp2']:.2f}"   if show_numbers and sig.get("tp2")   is not None else "‚Äî"
            stop  = f"{sig['stop']:.2f}"  if show_numbers and sig.get("stop")  is not None else "‚Äî"

            cols = st.columns(4)
            cols[0].markdown(f"**–í—Ö–æ–¥:** {entry}")
            cols[1].markdown(f"**–¶–µ–ª–∏:** TP1 {tp1} ‚Ä¢ TP2 {tp2}")
            cols[2].markdown(f"**–°—Ç–æ–ø:** {stop}")
            cols[3].markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {_fmt(sig.get('confidence'))}%")

            st.markdown(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {_fmt(sig.get('size'))}% NAV")

        with colR:
            score = float(sig.get("score", 0.0))
            st.markdown(render_gauge_svg(score, title="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞"), unsafe_allow_html=True)

        # –ë–µ–π–¥–∂ –ø—Ä–æ ML
        st.info(sig.get("ml_text", "[ML OFF] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rule-based –ª–æ–≥–∏–∫–∞."))

        # –ö–æ—Ä–æ—Ç–∫–∏–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
        base = (sig.get("short_text") or "").strip()
        if base:
            st.markdown(f"> {base}")
        alt = (sig.get("alt_text") or "").strip()
        if alt and alt != base:
            st.markdown("### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω")
            st.markdown(f"‚Ä¢ {alt}")

        meta_cols = st.columns(3)
        meta_cols[0].caption(f"–°–æ–∑–¥–∞–Ω: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
        meta_cols[1].caption(f"–ò—Å—Ç–µ–∫–∞–µ—Ç: ‚Äî")
        meta_cols[2].caption(f"ID: ‚Äî")

        if dev_mode:
            with st.expander("JSON"):
                st.code(json.dumps(sig, ensure_ascii=False, indent=2), language="json")

        st.caption("–ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –¢–æ—Ä–≥–æ–≤–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å —Ä–∏—Å–∫–æ–º.")
        st.caption(f"–ì–æ—Ç–æ–≤–æ –∑–∞ {time.time()-t0:.2f}s")

    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞:")
        st.exception(e)
else:
    st.caption("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª¬ª.")

