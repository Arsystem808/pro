# -*- coding: utf-8 -*-
from __future__ import annotations

# ---------- –ü—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É capintel ----------
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]  # ../
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

# ---------- –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞ –ø—É—Ç–∏ ----------
import streamlit as st
from typing import Any, Dict, List, Optional

# —Ç–µ–ø–µ—Ä—å –ø–∞–∫–µ—Ç capintel –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω
from capintel.signal_engine import build_signal
from capintel.narrator import trader_tone_narrative_ru
from capintel.visuals_svg import render_gauge_svg

# ---------- UI ----------
st.set_page_config(page_title="CapIntel ‚Äî AI Signals", layout="wide")

st.title("ü§ñ CapIntel ‚Äî AI Signals (Crypto & Equities)")
st.caption("Meta-labeling –ø–æ–≤–µ—Ä—Ö –ø—Ä–∞–≤–∏–ª. ML –≤–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω `models/meta.pkl`.")

# Sidebar
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
asset_class = st.sidebar.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["equity", "crypto"])
horizon = st.sidebar.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday", "swing", "position"])
ticker = st.sidebar.text_input("–¢–∏–∫–µ—Ä", "QQQ")
price_raw = st.sidebar.text_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", "")
show_gauge = st.sidebar.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", value=True)
dev = st.sidebar.toggle("–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", value=False)
run = st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é")

def fmt(x: Optional[float]) -> str:
    return "‚Äî" if x is None else f"{float(x):.2f}"

def render_targets(tps: List[float]) -> str:
    if not tps:
        return "‚Äî"
    return " ‚Ä¢ ".join([f"TP{i} {float(v):.2f}" for i, v in enumerate(tps, start=1)])

if run:
    # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º —Ü–µ–Ω—É
    try:
        price_val = float(price_raw.replace(",", ".")) if price_raw.strip() else None
    except Exception:
        price_val = None

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é
    spec: Dict[str, Any] = build_signal(ticker.upper().strip(), asset_class, horizon, price_val)

    st.subheader(f"{ticker.upper()} ‚Ä¢ {asset_class.upper()} ‚Ä¢ {horizon}")
    st.markdown(f"### ‚û§ –†–µ—à–µ–Ω–∏–µ: **{spec.get('action', 'WAIT')}**")

    c1, c2, c3, c4 = st.columns(4)
    with c1: st.markdown(f"**–í—Ö–æ–¥:** {fmt(spec.get('entry'))}")
    with c2: st.markdown(f"**–¶–µ–ª–∏:** {render_targets(spec.get('take_profit', []))}")
    with c3: st.markdown(f"**–°—Ç–æ–ø:** {fmt(spec.get('stop'))}")
    with c4:
        conf = spec.get("confidence", 0.0)
        st.markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {round(100*float(conf))}%")

    c5, c6 = st.columns(2)
    with c5:
        psz = spec.get("position_size_pct_nav", 0.0)
        st.markdown(f"**–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** {round(100*float(psz),2)}% NAV")
    with c6:
        st.markdown("&nbsp;")

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ([-2..+2], –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0)
    if show_gauge:
        score = float(spec.get("rating", 0.0) or 0.0)
        st.markdown(render_gauge_svg(score=score, title="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞"),
                    unsafe_allow_html=True)

    # –ë–ª–æ–∫ ML
    ml = spec.get("ml", {})
    ml_note = spec.get("ml_note", "")
    if ml.get("on"):
        txt = "[ML ON]"
        p = ml.get("p_succ")
        if p is not None:
            try: txt += f" p_succ‚âà{round(100*float(p)):.0f}%."
            except Exception: pass
        if ml_note: txt += " " + str(ml_note)
        st.info(txt)
    else:
        st.info(ml_note or "[ML OFF]")

    # –ù–∞—Ä–∞—Ç–∏–≤ ¬´–ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏¬ª
    narrative = spec.get("narrative_ru") or trader_tone_narrative_ru(spec, horizon)
    narrative = narrative.replace("—Å–∏–≥–Ω–∞–ª", "–∏–¥–µ—è").replace("–°–∏–≥–Ω–∞–ª", "–ò–¥–µ—è")
    st.info(narrative)

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è
    alts = spec.get("alternatives", []) or []
    def _differs(a: Dict[str, Any], b: Dict[str, Any]) -> bool:
        keys = ["action", "entry", "take_profit", "stop"]
        return any(str(a.get(k)) != str(b.get(k)) for k in keys)
    base_cmp = {k: spec.get(k) for k in ["action","entry","take_profit","stop"]}
    shown = []
    for alt in alts:
        if isinstance(alt, dict) and _differs(alt, base_cmp):
            shown.append(alt)
    if shown:
        st.markdown("### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω")
        for alt in shown:
            cond = alt.get("if_condition") or "—É—Å–ª–æ–≤–∏–µ"
            act  = alt.get("action","")
            entry = fmt(alt.get("entry"))
            tps   = render_targets(alt.get("take_profit", []))
            stop  = fmt(alt.get("stop"))
            st.markdown(f"- **–µ—Å–ª–∏ {cond}** ‚Üí **{act}** –æ—Ç **{entry}** ‚Üí {tps}, **—Å—Ç–æ–ø** {stop}")

    if dev:
        with st.expander("JSON"):
            st.code(spec, language="json")

else:
    st.caption("–ó–∞–ø–æ–ª–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é¬ª.")

