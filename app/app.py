# app/app.py
# -*- coding: utf-8 -*-

import math
from typing import Any, Dict, List, Optional

import streamlit as st

# —è–¥—Ä–æ
from capintel.signal_engine import build_signal
# svg-—à–∫–∞–ª–∞ (—É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É, –∏ –Ω–∞ –∫–æ—Ä—Ç–µ–∂)
from capintel.visuals_svg import render_gauge_svg


# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def _fmt(x: Optional[float], digits: int = 2) -> str:
    if x is None:
        return "‚Äî"
    try:
        return f"{float(x):.{digits}f}"
    except Exception:
        return str(x)

def _fmt_pct(x: Optional[float], digits: int = 0) -> str:
    if x is None:
        return "‚Äî"
    try:
        return f"{100.0 * float(x):.{digits}f}%"
    except Exception:
        return "‚Äî"

def _score_from(sig: Dict[str, Any]) -> float:
    """
    –ù–æ—Ä–º–∏—Ä—É–µ–º ¬´–æ—Ü–µ–Ω–∫—É¬ª –Ω–∞ —à–∫–∞–ª—É [-2; +2].
    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ –∏ confidence; –µ—Å–ª–∏ –µ—Å—Ç—å ML p_succ ‚Äî —Å–ª–µ–≥–∫–∞ —É—á–∏—Ç—ã–≤–∞–µ–º.
    """
    base = {"BUY": 1.0, "LONG": 1.0, "SHORT": -1.0, "SELL": -1.0, "WAIT": 0.0}
    action = str(sig.get("action", "WAIT")).upper()
    conf = float(sig.get("confidence", 0.5) or 0.5)  # 0..1
    ml = sig.get("ml") or {}
    p_succ = float(ml.get("p_succ", 0.5) or 0.5)

    # –±–∞–∑–æ–≤–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞: 0.8‚Ä¶2.0 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç confidence
    amp = 0.8 + 1.2 * conf
    s = amp * base.get(action, 0.0)

    # –º—è–≥–∫–∞—è –ø–æ–ø—Ä–∞–≤–∫–∞ ML –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ WAIT
    if action != "WAIT":
        tilt = (p_succ - 0.5) * 1.2  # -0.6..+0.6
        s += math.copysign(abs(tilt), s)

    return max(-2.0, min(2.0, s))


def _render_gauge(score: float, title: str = "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞") -> None:
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∏—Å—É–µ–º —à–∫–∞–ª—É: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Å—Ç—Ä–æ–∫—É, –∏ –∫–æ—Ä—Ç–µ–∂ (svg, height)."""
    try:
        gauge = render_gauge_svg(score=score, title=title)
        if isinstance(gauge, tuple):
            svg, h = gauge
            st.components.v1.html(svg, height=int(h), scrolling=False)
        else:
            st.markdown(gauge, unsafe_allow_html=True)
    except Exception:
        st.info("‚ö†Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç (–æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞).")


# -----------------------------
# UI
# -----------------------------
st.set_page_config(
    page_title="CapIntel ‚Äî AI Signals (Crypto & Equities)",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ CapIntel ‚Äî AI Signals (Crypto & Equities)")
st.caption("Meta-labeling –ø–æ–≤–µ—Ä—Ö –ø—Ä–∞–≤–∏–ª. ML –≤–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω `models/meta.pkl`.")

# --- Sidebar
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
asset_class = st.sidebar.selectbox(
    "–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", options=["equity", "crypto"], index=0
)
horizon = st.sidebar.selectbox(
    "–ì–æ—Ä–∏–∑–æ–Ω—Ç", options=["intraday", "swing", "position"], index=1
)
default_ticker = "AAPL" if asset_class == "equity" else "BTCUSD"
ticker = st.sidebar.text_input("–¢–∏–∫–µ—Ä", value=default_ticker).strip().upper()

price_override_str = st.sidebar.text_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", value="")
show_gauge = st.sidebar.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", value=True)
dev_mode = st.sidebar.toggle("–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", value=False)

if st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª"):
    st.session_state._go = True

# –ß—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
go = st.session_state.get("_go", True)

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
# -----------------------------
if go:
    if not ticker:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª¬ª.")
        st.stop()

    price_override: Optional[float] = None
    if price_override_str:
        try:
            price_override = float(price_override_str)
        except Exception:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª–µ ¬´–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞¬ª.")
            price_override = None

    try:
        sig: Dict[str, Any] = build_signal(
            ticker=ticker,
            asset_class=asset_class,
            horizon=horizon,
            price=price_override
        )
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + repr(e))
        if dev_mode:
            import traceback, sys
            st.exception(e)
        st.stop()

    # -----------------------------
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    # -----------------------------
    st.subheader(f"{ticker} ¬∑ {asset_class.upper()} ¬∑ {horizon}")

    action = str(sig.get("action", "WAIT")).upper()
    entry = sig.get("entry")
    tps: List[float] = sig.get("take_profit") or []
    stop = sig.get("stop")
    conf = sig.get("confidence")
    pos_sz = sig.get("position_size_pct_nav")

    colA, colB, colC, colD, colE = st.columns([1.2, 1.2, 1.2, 1.2, 1.2])

    with colA:
        st.markdown(f"### ‚û§ –†–µ—à–µ–Ω–∏–µ: **{action}**")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ WAIT
    show_numbers = action != "WAIT"

    with colB:
        st.write("**–í—Ö–æ–¥:**", _fmt(entry) if show_numbers else "‚Äî")
    with colC:
        if show_numbers and tps:
            st.write("**–¶–µ–ª–∏:**", " ¬∑ ".join([f"TP{i+1} {_fmt(tp)}" for i, tp in enumerate(tps)]))
        else:
            st.write("**–¶–µ–ª–∏:** ‚Äî")
    with colD:
        st.write("**–°—Ç–æ–ø:**", _fmt(stop) if show_numbers else "‚Äî")
    with colE:
        st.write("**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:**", _fmt_pct(conf, 0))

    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ 0)
    st.write("**–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:**", _fmt_pct(pos_sz, 2))

    # --- ML —Å—Ç–∞—Ç—É—Å / —Ç–µ—Ö. —Ä–µ–º–∞—Ä–∫–∞
    ml = sig.get("ml") or {}
    if ml.get("on"):
        p_succ = ml.get("p_succ")
        msg = "[ML ON]"
        if p_succ is not None:
            msg += f" p_succ‚âà{_fmt(p_succ, 2)}"
        st.info(msg)
    else:
        st.info(sig.get("tech_note_ru", "[ML OFF] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rule-based –ª–æ–≥–∏–∫–∞."))

    # --- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä (—à–∫–∞–ª–∞)
    if show_gauge:
        score = _score_from(sig)
        _render_gauge(score, title="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞")

    # --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    note = sig.get("narrative_ru") or sig.get("note_ru") or sig.get("note") or ""
    if note:
        st.markdown(f"> {note}")

    # --- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    alts = sig.get("alternatives") or []
    if alts:
        st.markdown("### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω")
        for alt in alts:
            alt_action = str(alt.get("action", "")).upper()
            alt_entry = alt.get("entry")
            alt_tps = alt.get("take_profit") or []
            alt_stop = alt.get("stop")
            cond = alt.get("if_condition") or alt.get("when") or ""
            line = []
            if cond:
                line.append(f"*{cond}*: ")
            line.append(f"**{alt_action}** –æ—Ç {_fmt(alt_entry)}")
            if alt_tps:
                line.append(" ‚Üí " + " ¬∑ ".join([f"TP{i+1} {_fmt(tp)}" for i, tp in enumerate(alt_tps)]))
            if alt_stop is not None:
                line.append(f", —Å—Ç–æ–ø {_fmt(alt_stop)}")
            st.markdown("‚Ä¢ " + "".join(line))

    # --- –¢–µ—Ö. JSON
    with st.expander("JSON", expanded=False):
        st.json(sig)

    # --- –î–∏—Å–∫–ª–µ–π–º–µ—Ä
    st.caption("–ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –¢–æ—Ä–≥–æ–≤–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å —Ä–∏—Å–∫–æ–º.")
