import os
import streamlit as st
from datetime import datetime, timezone
from capintel.signal_engine import build_signal
from capintel.visuals_svg import render_gauge_svg

st.set_page_config(page_title="CapIntel ‚Äî AI Signals", layout="wide")

st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
asset_class = st.sidebar.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["equity", "crypto"], index=0)
horizon     = st.sidebar.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday","swing","position"], index=1)
ticker      = st.sidebar.text_input("–¢–∏–∫–µ—Ä", "AAPL" if asset_class=="equity" else "BTCUSD")
price_str   = st.sidebar.text_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", "")
show_gauge  = st.sidebar.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", value=True)

st.title("ü§ñ CapIntel ‚Äî AI Signals (Crypto & Equities)")
st.caption("Meta-labeling –ø–æ–≤–µ—Ä—Ö –ø—Ä–∞–≤–∏–ª. ML –≤–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω models/meta.pkl.")

# –ö–Ω–æ–ø–∫–∞
if st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª"):
    try:
        price = float(price_str) if price_str.strip() else None
    except:
        price = None

    try:
        sig = build_signal(ticker, asset_class, horizon, price)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞:\n\n{type(e).__name__}: {e}")
    else:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.subheader(f"{ticker.upper()} ¬∑ {asset_class.upper()} ¬∑ {horizon}")
        st.markdown(f"### ‚û§ –î–µ–π—Å—Ç–≤–∏–µ: **{sig['action']}**")

        # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ —á–∏—Å–ª–∞
        cols = st.columns(3)
        cols[0].markdown(f"**–í—Ö–æ–¥:** {sig.get('entry', '‚Äî')}")
        tps = sig.get('take_profit', [])
        if tps:
            cols[1].markdown("**–¶–µ–ª–∏:** " + " ¬∑ ".join([f"TP{i+1} {v:.2f}" for i,v in enumerate(tps)]))
        else:
            cols[1].markdown("**–¶–µ–ª–∏:** ‚Äî")
        cols[2].markdown(f"**–°—Ç–æ–ø:** {sig.get('stop','‚Äî')}")

        cols = st.columns(2)
        cols[0].markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {int(round(sig.get('confidence',0)*100))}%")
        pos = sig.get('position_size_pct_nav', None)
        cols[1].markdown(f"**–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** {f'{pos:.1f}% NAV' if pos is not None else '‚Äî% NAV'}")

        # –°–∏–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        st.info(sig.get("narrative_ru",""))

        # –®–∫–∞–ª–∞-–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if show_gauge:
            # sentiment: -2..+2 (SHORT -> –æ—Ç—Ä–∏—Ü., BUY -> –ø–æ–ª–æ–∂., WAIT/CLOSE -> 0)
            act = sig["action"].upper()
            sentiment = {"BUY": +1.2, "SHORT": -1.2, "WAIT": 0.0, "CLOSE": 0.0}.get(act, 0.0)
            svg = render_gauge_svg(sentiment=sentiment, title="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞")
            st.write(svg, unsafe_allow_html=True)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
        alts = sig.get("alternatives", [])
        if alts:
            st.subheader("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω")
            for alt in alts:
                a = alt.get("action","")
                en = alt.get("entry","‚Äî")
                tps = alt.get("take_profit",[])
                stop = alt.get("stop","‚Äî")
                cond = alt.get("if_condition","")
                line = f"- **{cond}** ‚Üí **{a}** –æ—Ç **{en}**"
                if tps:
                    line += " ‚Üí " + " ¬∑ ".join([f"TP{i+1} {v:.2f}" for i,v in enumerate(tps)])
                line += f", **—Å—Ç–æ–ø {stop}**"
                st.markdown(line)

        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–ª–∞—à–∫–∞
        st.caption(sig.get("tech_note_ru",""))

else:
    st.write("–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª**.")
