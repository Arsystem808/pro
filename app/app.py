# app/app.py
import os
import sys
from typing import Any, Dict, List

# --- —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç capintel ---
ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

import streamlit as st
from capintel.signal_engine import build_signal


def _fmt_num(v: Any) -> str:
    if v is None:
        return "‚Äî"
    try:
        return f"{float(v):,.2f}".replace(",", " ")
    except Exception:
        return str(v)


st.set_page_config(page_title="CapIntel ‚Äî AI Signals", layout="wide")

st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
asset_class = st.sidebar.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["equity", "crypto"], index=0)
horizon     = st.sidebar.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday", "swing", "position"], index=1)
ticker      = st.sidebar.text_input("–¢–∏–∫–µ—Ä", "AAPL").upper().strip()
price_in    = st.sidebar.text_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", "")
price       = None
if price_in.strip():
    try:
        price = float(price_in.replace(",", "."))
    except ValueError:
        st.sidebar.error("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 232.10)")

run = st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")

st.title("ü§ñ CapIntel ‚Äî AI Signals (Crypto & Equities)")
st.caption("Meta-labeling –ø–æ–≤–µ—Ä—Ö –ø—Ä–∞–≤–∏–ª. ML –≤–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω models/meta.pkl.")

if not run:
    st.write("–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª**.")
    st.stop()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ ---
try:
    sig: Dict[str, Any] = build_signal(ticker, asset_class, horizon, price)
except Exception as e:
    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞:")
    st.exception(e)
    st.stop()

# --- –®–∞–ø–∫–∞ ---
st.subheader(f"{ticker} ¬∑ {asset_class.upper()} ¬∑ {horizon}")

st.markdown(f"### ‚û§ –î–µ–π—Å—Ç–≤–∏–µ: **{sig.get('action','WAIT')}**")

c1, c2, c3 = st.columns(3)
with c1:
    st.markdown(f"**–í—Ö–æ–¥:** {_fmt_num(sig.get('entry'))}")
with c2:
    tps: List[float] = sig.get("take_profit") or []
    tps_str = " ¬∑ ".join([f"TP{i+1} {_fmt_num(v)}" for i, v in enumerate(tps)]) if tps else "‚Äî"
    st.markdown(f"**–¶–µ–ª–∏:** {tps_str}")
with c3:
    st.markdown(f"**–°—Ç–æ–ø:** {_fmt_num(sig.get('stop'))}")

# --- –ú–µ—Ç—Ä–∏–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ / —Ä–∞–∑–º–µ—Ä ---
conf = float(sig.get("confidence", 0.60))
st.markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {int(round(conf*100))}%")
st.markdown(f"**–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** {_fmt_num(sig.get('position_size_pct_nav'))}% NAV")

# --- ML —Å—Ç–∞—Ç—É—Å ---
ml = sig.get("ml") or {}
if ml.get("on") and ml.get("p_succ") is not None:
    st.success(f"[ML ON] –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ —Å–¥–µ–ª–∫–∏ p_succ‚âà{ml['p_succ']:.2f}")
elif ml.get("on") is False:
    st.info("[ML OFF] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rule-based –ª–æ–≥–∏–∫–∞.")

# --- –ù–∞—Ä—Ä–∞—Ç–∏–≤ ---
if sig.get("narrative_ru"):
    st.info(sig["narrative_ru"])

# --- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω ---
alts = sig.get("alternatives") or []
if alts:
    st.markdown("### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω")
    for alt in alts:
        tp_str = " ¬∑ ".join([f"TP{i+1} {_fmt_num(v)}" for i, v in enumerate(alt.get("take_profit", []))]) or "‚Äî"
        st.markdown(
            f"- **{alt.get('action','WAIT')}** –æ—Ç {_fmt_num(alt.get('entry'))} ‚Üí {tp_str}, —Å—Ç–æ–ø {_fmt_num(alt.get('stop'))}"
            + (" _(—É—Å–ª–æ–≤–Ω—ã–π)_"
               if alt.get("conditional") else "")
        )

# --- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ / JSON ---
cA, cB = st.columns(2)
with cA:
    st.caption(
        f"–°–æ–∑–¥–∞–Ω: {sig.get('created_at','‚Äî')} ¬∑ –ò—Å—Ç–µ–∫–∞–µ—Ç: {sig.get('expires_at','‚Äî')} ¬∑ ID: {sig.get('id','‚Äî')}"
    )
    st.caption("–ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –¢–æ—Ä–≥–æ–≤–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å —Ä–∏—Å–∫–æ–º.")
with cB:
    with st.expander("JSON"):
        import json
        st.code(json.dumps(sig, ensure_ascii=False, indent=2), language="json")
